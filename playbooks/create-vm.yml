---

- name: launching an ec2 instance
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:

  - name: find a subnet id
    ec2_vpc_subnet_facts:
      region: "{{aws_region}}"
    register: subnet_ids

  - name: create a security group
    ec2_group:
      name: allow_all
      description: "allow all traffic"
      region: "{{aws_region}}"
      vpc_id: "{{vpc_id}}"
      rules:
        - proto: tcp
          from_port: 0
          to_port: 60000
          cidr_ip: 0.0.0.0/0
    register: ocp_security_group

  - name: launch an ec2 instance
    ec2:
      instance_type: m4.large
      region: "{{aws_region}}"
      image: "{{ami_id}}"
      vpc_subnet_id: "{{vpc_subnet_id}}"
      group_id: "{{ocp_security_group.group_id}}"
      key_name: "{{key_name}}"
      assign_public_ip: true
      wait: True
      volumes:
        - device_name: /dev/sda1
          volume_size: 50
          volume_type: gp2
        - device_name: /dev/sdb
          volume_size: 20
          volume_type: gp2
      instance_tags:
        Name: "{{ instance_name }}"
        ocp_master: "{{ ocp_master }}"
        ocp_node: "{{ ocp_node }}"
        ocp_new_node: "{{ ocp_new_node }}"
        ocp_etcd: "{{ ocp_etcd }}"
        ready_for_provisionning: "True"
    register: ec2

  - name: connect to Tower
    command: "tower-cli config {{ item }}"
    with_items:
      - username {{ tower_user }}
      - password {{ tower_password }}
      - host {{ tower_host }} 
    delegate_to: localhost 

  - name: create host in Tower debug
    debug: 
       var: ec2.instances 
       verbosity: 0

  - name: create host in Tower
    command: "tower-cli host create -n {{ec2.instances[0].public_ip}} -i 7"

  - name: associate host to master group in Tower
    command: "tower-cli host associate --host {{ec2.instances[0].public_ip}} --group 357"
    when:
     - ocp_master == True

  - name: associate host to nfs group in Tower
    command: "tower-cli host associate --host {{ec2.instances[0].public_ip}} --group 359"
    when:
     - ocp_nfs == True

  - name: associate host to etcd group in Tower
    command: "tower-cli host associate --host {{ec2.instances[0].public_ip}} --group 358"
    when:
     - ocp_etcd == True

  - name: associate host to node group in Tower
    command: "tower-cli host associate --host {{ec2.instances[0].public_ip}} --group 360"
    when:
     - ocp_node == True

  - name: associate host to new_node group in Tower
    command: "tower-cli host associate --host {{ec2.instances[0].public_ip}} --group 502"
    when:
     - ocp_new_node == True
  
  - name: add host to in memory inventory
    add_host:
       name: "{{ec2.instances[0].public_ip}}"

  - name: Force unregister before register
    redhat_subscription:
      state: absent
    ignore_errors: true

  - name: register node with subscription-manager
    redhat_subscription: state=present username="{{rhn_user_name}}" password="{{rhn_password}}" autosubscribe=false
    register: task_result
    until: task_result | succeeded
    retries: 10
    delay: 5

  - name: attach node to subscription pool
    command: subscription-manager attach --pool {{pool_id}}
    register: task_result
    until: task_result.rc == 0
    retries: 10
    delay: 1
    ignore_errors: yes

  - name: Enable only required repositories with Subscription Manager
    command: subscription-manager repos --disable="*" --enable="rhel-7-server-rpms" --enable="rhel-7-server-extras-rpms" --enable="rhel-7-server-ose-3.4-rpms"

  - name: Run yum update
    yum: name=* state=latest

  - name: "Install pre-requisite packages"
    yum: state=present name={{ item }}
    with_items:
    - wget
    - vim-enhanced
    with_items:
    - wget
    - vim-enhanced
    - net-tools
    - bind-utils
    - git
    - iptables
    - bridge-utils
    - atomic-openshift-utils

  - name: Install Docker
    yum: name=docker state=installed update_cache=yes
    register: dockerInstalled
    notify:
    - Stop Docker
    - Clean Docker Data

  - meta: flush_handlers

  - name: Insecure Registry Config
    lineinfile: dest=/etc/sysconfig/docker  regexp="^OPTIONS" line=OPTIONS='--selinux-enabled --insecure-registry 172.30.0.0/16 --log-opt max-size=1M --log-opt max-file=3' backup=yes backrefs=yes state=present
    register: dockerConfigUpdated

  - name: Create Docker Storage Config
    blockinfile:
      dest: /etc/sysconfig/docker-storage-setup
      create: yes
      content: |
        DEVS=/dev/{{docker_storage_mount}}
        VG=docker-vg
    register: dockerStorageConfigFileCreated

  - meta: flush_handlers

  - name: Check if LVS exists
    shell: lvs | grep docker-pool | awk '{ print $1}'
